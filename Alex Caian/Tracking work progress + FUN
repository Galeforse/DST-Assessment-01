    ## This entire upload is an update of sorts of my ongoing research
    ## No fancy Jupyter for now, just raw code and comments. Feel free to 
    ##   A) Borrow or look over functions which will be listed first thing here, along with libraries used
    ##   B) Modify, borrow, correct or comment on any work done here, as I DON'T use this upload for actually working, only for updating what I've already done
    ##      My work continues otherwise externally, but I'll make sure to check if people modified stuff in here.
    
    
    ###   WORK IN PROGRESS. MODIFY/COMMENT/BORROW/CORRECT AT WILL ###
    
    
                                                                      
                                                              ######### FUNCTIONS + LIBRARIES #############
                                                              
library(caret) # install.packages("caret")
library(e1071) # install.packages("e1071")
library(knitr) # install.packages("knitr")
library(class) # install.packages("class") ## gg2plot comes with it too, or likewise with caret (I think?)

## Basic normalizing function
        nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
## This function removes the last column. Trivial usage, but I'd rather call it than type the same process over and over again as I played around with columns a bit in this work:
        undone <- function(x) {
	n <- ncol(x)
	if (class(x) == "data.frame") { x <- x[, -n] }
	}
## Its extension:
        undone.all <- function(x, ...) {
	x <- undone(x)
	invisible(x)	}
## The function used to create tables with the last column - pair it with undone() for whatever results you need:
      labels <- function(x, n = ncol(x)) {
	t <- as.data.frame(table(x[,n]))
			 }
## This function assigns unique numbers to each individual type of attack + a number for normal behaviour
      Freq <- function(x) {
	n <- ncol(x)
	if (class(x) == "data.frame") {
		labs <- tapply(x[,n] , x[,n])
		x <- cbind(x,labs)		# labs == 9 corresponds to normal
		l <- length(unique(x$labs)) 
		}
		x		
		}		# Once no longer needed, can be undone with our undone() function





                                                                ########### CODE ############
  # setwd("D://R-4.0.2//ExcelWorks")
kd <- read.csv(file = "kd_train.csv", header = T)
                # unique(kd$folds) - We've partitioned it into 9 folds
kd1 <- kd[kd$folds== 1, ]
kd2 <- kd[kd$folds== 2, ]
kd3 <- kd[kd$folds== 3, ]
kd4 <- kd[kd$folds== 4, ]
kd5 <- kd[kd$folds== 5, ]
kd6 <- kd[kd$folds== 6, ]
kd7 <- kd[kd$folds== 7, ]
kd8 <- kd[kd$folds== 8, ]
kd9 <- kd[kd$folds== 9, ]

kd1 <- undone(kd1)
kd2 <- undone(kd2)
kd3 <- undone(kd3)
kd4 <- undone(kd4)
kd5 <- undone(kd5)
kd6 <- undone(kd6)
kd7 <- undone(kd7)
kd8 <- undone(kd8)
kd9 <- undone(kd9)	## We removed all 'folds'

ld1 <- labels(kd1)
ld2 <- labels(kd2)
ld3 <- labels(kd3)
ld4 <- labels(kd4)
ld5 <- labels(kd5)
ld6 <- labels(kd6)
ld7 <- labels(kd7)
ld8 <- labels(kd8)
ld9 <- labels(kd9) # We portray the appearances of each individual attack within each individual fold.

# png(file = "Folded_Attacks_Visualisation.png")
op <- par(mfrow = c(3,3))
	pie(ld1$Freq, labels = ld1[,1], col = rainbow(20))
	pie(ld2$Freq, labels = ld2[,1], col = rainbow(20))
	pie(ld3$Freq, labels = ld3[,1], col = rainbow(20))
	pie(ld4$Freq, labels = ld4[,1], col = rainbow(20))
	pie(ld5$Freq, labels = ld5[,1], col = rainbow(20))
	pie(ld6$Freq, labels = ld6[,1], col = rainbow(20))
	pie(ld7$Freq, labels = ld7[,1], col = rainbow(20))
	pie(ld8$Freq, labels = ld8[,1], col = rainbow(20))
	pie(ld9$Freq, labels = ld9[,1], col = rainbow(20))
par(op)
# dev.off()                                         ## Visualisation of what's going on above.

kd1 <- Freq(kd1)
kd2 <- Freq(kd2)
kd3 <- Freq(kd3)
kd3 <- Freq(kd3)
kd4 <- Freq(kd4)
kd5 <- Freq(kd5)
kd6 <- Freq(kd6)
kd7 <- Freq(kd7)
kd8 <- Freq(kd8)
kd9 <- Freq(kd9)  ## We now attach their unique numerology. ## RECALL WE ELIMINATED THE FOLDS ALREADY

## Now to apply it on the whole dataset
kd <- undone(kd)
kd <- Freq(kd)		## labs == 12 corresponds to label == "normal."
ld <- labels(kd, n = (ncol(kd)-1))
# png(file = "All_attacks_Visualisation.png")
pie(ld$Freq, labels = ld[,1], col = rainbow(23),
main = "Visualisation of all behaviour")
# dev.off()

              ## At this rate, the differences between the 9 folds and the one
		## big dataset, or amongst each other is barely notable with the naked eye.
		## We will see it's the same for the testing data, as expected.
train <- as.vector(as.numeric(kd$labs)) # This will be our training set

# We're only interested in the numeric values, hence 6:42
kd_train <- kd[, 1:42]
# kd1_train <- kd1[, 6:42]
# kd2_train <- kd2[, 6:42]
# kd3_train <- kd3[, 6:42]
want <- kd$label

## It's time to bring in the training dataset

kt <- read.csv(file = "kd_test.csv", header = T)
kt <- Freq(kt)
kd_test <- kt[, 1:42]
pred <- knn(train = kd_train, test = kd_test, cl = want, k = 1, use.all = FALSE)        ## THIS RETURNS AN ERROR I STILL HAVEN'T FIGURED OUT. STACK ANSWERS ARE EITHER UNHELPFUL OR 
                                                                                        ## DON'T ADDRESS THE ISSUE AT ALL. IF ANYONE HAS A LOOK OVER IT LET ME KNOW.
                                       ### See the comments on line 134 for a description of what I've already tried and how it went.  
## Alternative procedure for the same effect (tested, same error, but also same dataset up to permutation):
   
kdd <- read.csv(file = "KD99.csv", header = T)
ran <- sample(1:nrow(kdd), 0.9 * nrow(kdd))
kdd2 <- as.data.frame(lapply(kdd[,33:41], nor))
kdd_train <- kdd2[ran, ]
kdd_test <- kdd2[-ran, ]
kdd_train_target <- kdd[ran, 42]
kdd_test_target <- kdd[-ran, 42]
pr <- knn3Train(train = kdd_train,test = kdd_test,cl=kdd_train_target,k=1)	## Same error
                                      

